{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getUnique","arr","comp","map","e","i","final","indexOf","filter","require","config","Geocode","setApiKey","process","API_KEY","Root","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","basketOpen","order","latData","lngData","filterOpen","filterValue","postalCode","pizzas","pizzasLength","restaurantsLength","bestToWorst","loadingDone","globalIngredients","unwanted","executeSearch","bind","assertThisInitialized","sortUp","sortDown","myString","cost","x","y","indexOfDemarkation","nameFilteredFourth","slice","replace","rawNumber","search","Number","parseFloat","toPrecision","newItems","sort","a","b","variable","setState","reverse","_this2","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","fromAddress","then","response","_response$results$0$g","results","geometry","location","lat","lng","error","console","err","stop","restaurantsList","_callee2","takeaway","country","restaurants","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","restaurant","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","category","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","product","_context2","Takeaway","getCountryById","sent","getRestaurants","undefined","Symbol","iterator","done","value","getMenu","categories","products","name","toLowerCase","includes","options","choices","data","push","ingredients","parseIngredients","description","from","calculateVariable","deliveryPrice","length","t0","return","finish","t1","t2","t3","forEach","item","ingredient","checked","_this3","coords","latitude","longitude","_callee3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","_context3","array","split","list","_this4","react_default","createElement","Dialog","PaperProps","style","overflow","open","fullScreen","DialogContent","textAlign","Box","boxShadow","DialogTitle","paddingBottom","Typography","variant","TextField","inputProps","fontSize","width","paddingTop","placeholder","onFocus","onChange","event","target","Button","padding","margin","color","onClick","executeSearchGps","GpsFixed_default","Drawer","anchor","onClose","List","index","Fragment","ListItem","display","Checkbox","newState","filtered","ListItemText","primary","button","newOrder","dish","backgroundColor","secondary","reduce","cur","some","r","key","CircularProgress","height","DialogActions","position","top","right","Fab","bottom","Badge","invisible","badgeContent","ShoppingBasket_default","React","Component","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","suppressLocationOnMount","Boolean","window","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.360136bd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Takeaway } from \"takeaway-mod\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport GpsFixedIcon from \"@material-ui/icons/GpsFixed\";\r\nimport ShoppingBasketIcon from \"@material-ui/icons/ShoppingBasket\";\r\nimport Geocode from \"react-geocode\";\r\nimport { geolocated } from \"react-geolocated\";\r\nrequire('dotenv').config()\r\nGeocode.setApiKey(process.env.API_KEY);\r\nfunction precise(x, y) {\r\n  return Number.parseFloat(x).toPrecision(y);\r\n}\r\nfunction getUnique(arr, comp) {\r\n  const unique = arr\r\n    .map(e => e[comp])\r\n\r\n    // store the keys of the unique objects\r\n    .map((e, i, final) => final.indexOf(e) === i && i)\r\n\r\n    // eliminate the dead keys & store unique objects\r\n    .filter(e => arr[e])\r\n    .map(e => arr[e]);\r\n\r\n  return unique;\r\n}\r\nclass Root extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.executeSearch = this.executeSearch.bind(this);\r\n    this.sortUp = this.sortUp.bind(this);\r\n    this.sortDown = this.sortDown.bind(this);\r\n  }\r\n  state = {\r\n    basketOpen: false,\r\n    order: [],\r\n    latData: 0,\r\n    lngData: 0,\r\n    filterOpen: false,\r\n    filterValue: \"\",\r\n    postalCode: \"\",\r\n    pizzas: [],\r\n    pizzasLength: 0,\r\n    restaurantsLength: 0,\r\n    bestToWorst: null,\r\n    loadingDone: true,\r\n    globalIngredients: [],\r\n    unwanted: []\r\n  };\r\n\r\n  calculateVariable(myString, cost) {\r\n    let indexOfDemarkation = myString.indexOf(\"[\");\r\n    let splicedName = myString.slice(indexOfDemarkation);\r\n    let nameFilteredOnce = splicedName.replace(\"[\", \"\");\r\n    let nameFilteredTwice = nameFilteredOnce.replace(\"]\", \"\");\r\n    let nameFilteredThird = nameFilteredTwice.replace(\" \", \"\");\r\n    let nameFilteredFourth = nameFilteredThird.replace(\"cm\", \"\");\r\n    let rawNumber = nameFilteredFourth.slice(\r\n      nameFilteredFourth.search(/[0-9]/g)\r\n    );\r\n    let costToMonetaryValue = cost / 100;\r\n    let rawVariable = (3.14 * (rawNumber ^ 2)) / costToMonetaryValue;\r\n    return precise(rawVariable, 3);\r\n  }\r\n  sortUp() {\r\n    let items = this.state.pizzas;\r\n    let newItems = items.sort(function(a, b) {\r\n      return a.variable - b.variable;\r\n    });\r\n    this.setState({ pizzas: newItems.reverse(), bestToWorst: true });\r\n  }\r\n  sortDown() {\r\n    let items = this.state.pizzas;\r\n    let newItems = items.sort(function(a, b) {\r\n      return a.variable - b.variable;\r\n    });\r\n    this.setState({ pizzas: newItems, bestToWorst: false });\r\n  }\r\n\r\n  executeSearch() {\r\n    this.setState({\r\n      globalIngredients: [],\r\n      pizzas: [],\r\n      pizzasLength: 0,\r\n      restaurantsLength: 0,\r\n      bestToWorst: null\r\n    });\r\n    let latData = 0;\r\n    let lngData = 0;\r\n    (async () => {\r\n      try {\r\n        Geocode.fromAddress(this.state.postalCode).then(\r\n          response => {\r\n            const { lat, lng } = response.results[0].geometry.location;\r\n            latData = lat;\r\n            lngData = lng;\r\n          },\r\n          error => {\r\n            console.error(error);\r\n          }\r\n        );\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    })();\r\n    this.setState({ loadingDone: false, latData: latData, lngData: lngData });\r\n    let pizzas = [];\r\n    let restaurantsList = [];\r\n    (async () => {\r\n      try {\r\n        const takeaway = new Takeaway();\r\n\r\n        const country = await takeaway.getCountryById(\"PL\");\r\n        const restaurants = await country.getRestaurants(\"\", latData, lngData);\r\n\r\n        for (const restaurant of restaurants) {\r\n          await restaurant.getMenu(latData, lngData);\r\n          if (restaurant.categories) {\r\n            for (const category of restaurant.categories) {\r\n              for (const product of category.products) {\r\n                if (\r\n                  product.name &&\r\n                  product.name.toLowerCase().includes(\"pizza\") &&\r\n                  (product.name.toLowerCase().includes(\"cm\") ||\r\n                    (product.options[0] &&\r\n                      product.options[0].choices[0].data.name\r\n                        .toLowerCase()\r\n                        .includes(\"cm\")))\r\n                ) {\r\n                  if (!restaurantsList.includes(restaurant)) {\r\n                    restaurantsList.push(restaurant);\r\n                  }\r\n                  pizzas.push({\r\n                    product: product,\r\n                    ingredients: this.parseIngredients(\r\n                      product.data.description\r\n                    ),\r\n                    from: restaurant.name,\r\n                    variable: this.calculateVariable(\r\n                      product.data.name,\r\n                      product.data.deliveryPrice\r\n                    )\r\n                  });\r\n                  this.setState({\r\n                    pizzasLength: pizzas.length,\r\n                    restaurantsLength: restaurantsList.length\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error(err);\r\n      } finally {\r\n        let globalIngredients = [];\r\n\r\n        pizzas.forEach(item => {\r\n          item.ingredients.forEach(ingredient => {\r\n            if (\r\n              !globalIngredients.includes({ name: ingredient, checked: true })\r\n            ) {\r\n              globalIngredients.push({ name: ingredient, checked: true });\r\n            }\r\n          });\r\n        });\r\n\r\n        this.setState({\r\n          pizzas: pizzas,\r\n          loadingDone: true,\r\n          globalIngredients: getUnique(globalIngredients, \"name\")\r\n        });\r\n      }\r\n    })();\r\n  }\r\n  // innerRef;\r\n  // getInnerRef(ref) {\r\n  //   this.innerRef = ref;\r\n  // }\r\n  //\r\n  // getLocation() {\r\n  //   this.innerRef && this.innerRef.getLocation();\r\n  // }\r\n  executeSearchGps() {\r\n    this.setState({\r\n      globalIngredients: [],\r\n      postalCode: \"📍 Twoja lokalizacja 📍\",\r\n      pizzas: [],\r\n      pizzasLength: 0,\r\n      restaurantsLength: 0,\r\n      bestToWorst: null\r\n    });\r\n    //this.getInnerRef()\r\n    //  alert(JSON.stringify(this.getLocation()))\r\n    let latData = this.props.coords.latitude;\r\n    let lngData = this.props.coords.longitude;\r\n    this.setState({ loadingDone: false, latData: latData, lngData: lngData });\r\n    let pizzas = [];\r\n    let restaurantsList = [];\r\n    (async () => {\r\n      try {\r\n        const takeaway = new Takeaway();\r\n\r\n        const country = await takeaway.getCountryById(\"PL\");\r\n        const restaurants = await country.getRestaurants(\"\", latData, lngData);\r\n\r\n        for (const restaurant of restaurants) {\r\n          await restaurant.getMenu(latData, lngData);\r\n\r\n          if (restaurant.categories) {\r\n            for (const category of restaurant.categories) {\r\n              for (const product of category.products) {\r\n                if (\r\n                  product.name &&\r\n                  product.name.toLowerCase().includes(\"pizza\") &&\r\n                  (product.name.toLowerCase().includes(\"cm\") ||\r\n                    (product.options[0] &&\r\n                      product.options[0].choices[0].data.name\r\n                        .toLowerCase()\r\n                        .includes(\"cm\")))\r\n                ) {\r\n                  if (!restaurantsList.includes(restaurant)) {\r\n                    restaurantsList.push(restaurant);\r\n                  }\r\n                  pizzas.push({\r\n                    product: product,\r\n                    ingredients: this.parseIngredients(\r\n                      product.data.description\r\n                    ),\r\n                    from: restaurant.name,\r\n                    variable: this.calculateVariable(\r\n                      product.data.name,\r\n                      product.data.deliveryPrice\r\n                    )\r\n                  });\r\n\r\n                  this.setState({\r\n                    pizzasLength: pizzas.length,\r\n                    restaurantsLength: restaurantsList.length\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (err) {\r\n        console.error(err);\r\n      } finally {\r\n        let globalIngredients = [];\r\n\r\n        pizzas.forEach(item => {\r\n          item.ingredients.forEach(ingredient => {\r\n            if (\r\n              !globalIngredients.includes({ name: ingredient, checked: true })\r\n            ) {\r\n              globalIngredients.push({ name: ingredient, checked: true });\r\n            }\r\n          });\r\n        });\r\n\r\n        this.setState({\r\n          pizzas: pizzas,\r\n          loadingDone: true,\r\n          globalIngredients: getUnique(globalIngredients, \"name\"),\r\n          latData: latData,\r\n          lngData: lngData\r\n        });\r\n      }\r\n    })();\r\n  }\r\n  parseIngredients(description) {\r\n    let string = description.replace(/ i /, \", \");\r\n    let string2 = string.replace(\". \", \", \");\r\n    let array = string2.slice(2).split(\", \");\r\n    let list = [];\r\n    array.forEach(item => list.push(\"z \" + item));\r\n    return list;\r\n  }\r\n  render() {\r\n    return (\r\n      <Dialog\r\n        PaperProps={{ style: { overflow: \"hidden\" } }}\r\n        open={true}\r\n        fullScreen\r\n      >\r\n        <DialogContent\r\n          style={{\r\n            textAlign: \"center\"\r\n          }}\r\n        >\r\n          <Box boxShadow={4}>\r\n            <DialogTitle style={{ paddingBottom: 0 }}>\r\n              Kalkulator opłacalności pizzy\r\n            </DialogTitle>\r\n            <br />\r\n            <Typography variant=\"subtitle2\">Made by Daks</Typography>\r\n\r\n            <TextField\r\n              inputProps={{\r\n                style: { textAlign: \"center\", fontSize: \"larger\" }\r\n              }}\r\n              style={{ width: \"70%\", paddingTop: 50 }}\r\n              placeholder=\"Wpisz adres / Kod pocztowy\"\r\n              value={this.state.postalCode}\r\n              onFocus={\r\n                this.state.postalCode === \"📍 Twoja lokalizacja 📍\" &&\r\n                (() => this.setState({ postalCode: \"\" }))\r\n              }\r\n              onChange={event =>\r\n                this.setState({ postalCode: event.target.value })\r\n              }\r\n            />\r\n            <br />\r\n\r\n            <Button\r\n              style={{ padding: 16, margin: 16, fontSize: \"large\" }}\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n              onClick={() => this.executeSearch(this.state.postalCode)}\r\n            >\r\n              Wyszukaj i oblicz\r\n            </Button>\r\n            <Button\r\n              style={{ padding: 16, margin: 16, fontSize: \"large\" }}\r\n              color=\"primary\"\r\n              variant=\"contained\"\r\n              onClick={() => {\r\n                this.executeSearchGps(this.state.postalCode);\r\n              }}\r\n            >\r\n              <GpsFixedIcon />\r\n            </Button>\r\n            <br />\r\n            {/*  <Button\r\n            disabled={this.state.pizzas.length === 0}\r\n            onClick={() => console.debug(this.state.pizzas)}\r\n          >\r\n            Debug (dump pizza array to console)\r\n          </Button>*/}\r\n            <br />\r\n\r\n            <Drawer\r\n              anchor=\"left\"\r\n              onClose={() =>\r\n                this.setState({ filterOpen: !this.state.filterOpen })\r\n              }\r\n              PaperProps={{ style: { width: 250 } }}\r\n              open={this.state.filterOpen}\r\n            >\r\n              <Button\r\n                onClick={() =>\r\n                  this.setState({ filterOpen: !this.state.filterOpen })\r\n                }\r\n              >\r\n                Zamknij filtr\r\n              </Button>\r\n              <TextField\r\n                style={{ padding: 16 }}\r\n                placeholder=\"Wyszukaj składnik\"\r\n                value={this.state.filterValue}\r\n                onChange={event =>\r\n                  this.setState({ filterValue: event.target.value })\r\n                }\r\n              />\r\n\r\n              <List>\r\n                {this.state.loadingDone &&\r\n                  this.state.globalIngredients.length > 0 &&\r\n                  this.state.globalIngredients.map((item, index) => (\r\n                    <React.Fragment>\r\n                      <ListItem\r\n                        style={{\r\n                          display:\r\n                            !item.name.includes(this.state.filterValue) &&\r\n                            \"none\"\r\n                        }}\r\n                      >\r\n                        <Checkbox\r\n                          checked={item.checked}\r\n                          onChange={() => {\r\n                            let newState = this.state;\r\n                            newState.globalIngredients[\r\n                              index\r\n                            ].checked = !item.checked;\r\n                            newState.unwanted = newState.globalIngredients.filter(\r\n                              filtered => {\r\n                                return !filtered.checked;\r\n                              }\r\n                            );\r\n                            this.setState({ newState });\r\n                          }}\r\n                        />\r\n                        <ListItemText primary={item.name} />\r\n                      </ListItem>\r\n                    </React.Fragment>\r\n                  ))}\r\n              </List>\r\n            </Drawer>\r\n            <Drawer\r\n              anchor=\"right\"\r\n              onClose={() =>\r\n                this.setState({ basketOpen: !this.state.basketOpen })\r\n              }\r\n              PaperProps={{ style: { width: 250 } }}\r\n              open={this.state.basketOpen}\r\n            >\r\n              <Button\r\n                onClick={() =>\r\n                  this.setState({ basketOpen: !this.state.basketOpen })\r\n                }\r\n              >\r\n                Zamknij koszyk\r\n              </Button>\r\n\r\n              <List>\r\n                {this.state.order.length > 0 &&\r\n                  this.state.order.map((item, index) => (\r\n                    <React.Fragment>\r\n                      <ListItem\r\n                        button\r\n                        onClick={() => {\r\n                          let newOrder = this.state.order.filter(dish => {\r\n                            return dish !== item;\r\n                          });\r\n                          this.setState({ order: newOrder });\r\n                        }}\r\n                        style={{\r\n                          backgroundColor: index % 2 !== 0 ? \"#fff\" : \"#eee\"\r\n                        }}\r\n                      >\r\n                        <ListItemText\r\n                          style={{ textAlign: \"start\" }}\r\n                          primary={item.product.data.name + \" - \" + item.from}\r\n                          secondary={item.product.data.description}\r\n                        />\r\n                        <ListItemText\r\n                          style={{ textAlign: \"end\" }}\r\n                          primary={item.variable + \"cm2 / 1zł\"}\r\n                          secondary={\r\n                            \"Całkowity Koszt: \" +\r\n                            item.product.data.deliveryPrice / 100 +\r\n                            \"zł\"\r\n                          }\r\n                        />\r\n                      </ListItem>\r\n                    </React.Fragment>\r\n                  ))}\r\n              </List>\r\n              <Typography variant=\"button\">\r\n                Całkowity koszt zamówienia razem z dostawą =\r\n                <b>\r\n                  {\" \"}\r\n                  {this.state.order.length > 0\r\n                    ? this.state.order.reduce(function(prev, cur) {\r\n                        return prev + cur.product.data.deliveryPrice / 100;\r\n                      }, 0)\r\n                    : 0}\r\n                  zł\r\n                </b>\r\n              </Typography>\r\n            </Drawer>\r\n            {this.state.loadingDone && this.state.pizzas.length > 0 && (\r\n              <Typography variant=\"h6\">\r\n                {this.state.pizzasLength} wyświetlanych pozycji z{\" \"}\r\n                {this.state.restaurantsLength} restauracji\r\n              </Typography>\r\n            )}\r\n            <br />\r\n            {this.state.pizzas.length !== 0 && (\r\n              <div>\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  style={{\r\n                    backgroundColor:\r\n                      this.state.bestToWorst === true && \"#b5b5b5\"\r\n                  }}\r\n                  onClick={() => this.sortUp()}\r\n                >\r\n                  ↑ Od Najlepszych ↑\r\n                </Button>{\" \"}\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  onClick={() =>\r\n                    this.setState({ filterOpen: !this.state.filterOpen })\r\n                  }\r\n                >\r\n                  <b> Otwórz filtr </b>\r\n                </Button>{\" \"}\r\n                <Button\r\n                  variant=\"outlined\"\r\n                  style={{\r\n                    backgroundColor:\r\n                      this.state.bestToWorst === false && \"#b5b5b5\"\r\n                  }}\r\n                  onClick={() => this.sortDown()}\r\n                >\r\n                  ↓ Od Najgorszych ↓\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </Box>\r\n\r\n          <List>\r\n            {this.state.loadingDone &&\r\n              this.state.pizzas.length > 0 &&\r\n              this.state.pizzas.map((item, index) => (\r\n                <React.Fragment>\r\n                  {!this.state.unwanted.some(r =>\r\n                    item.ingredients.includes(r.name)\r\n                  ) && (\r\n                    <ListItem\r\n                      button\r\n                      onClick={() => {\r\n                        if (!this.state.order.includes(item)) {\r\n                          let newState = this.state;\r\n                          newState.order.push(item);\r\n                          this.setState({ newState });\r\n                        } else {\r\n                          let newOrder = this.state.order.filter(dish => {\r\n                            return dish !== item;\r\n                          });\r\n                          this.setState({ order: newOrder });\r\n                        }\r\n                      }}\r\n                      key={index}\r\n                      style={{\r\n                        backgroundColor: this.state.order.includes(item)\r\n                          ? index % 2 !== 0\r\n                            ? \"#bbdefb\"\r\n                            : \"#90caf9\"\r\n                          : index % 2 !== 0\r\n                          ? \"#fff\"\r\n                          : \"#eee\"\r\n                      }}\r\n                    >\r\n                      <ListItemText\r\n                        style={{ textAlign: \"start\" }}\r\n                        primary={item.product.data.name + \" - \" + item.from}\r\n                        secondary={item.product.data.description}\r\n                      />\r\n                      <ListItemText\r\n                        style={{ textAlign: \"end\" }}\r\n                        primary={item.variable + \"cm2 / 1zł\"}\r\n                        secondary={\r\n                          \"Całkowity Koszt: \" +\r\n                          item.product.data.deliveryPrice / 100 +\r\n                          \"zł\"\r\n                        }\r\n                      />\r\n                    </ListItem>\r\n                  )}\r\n                </React.Fragment>\r\n              ))}\r\n            {!this.state.loadingDone && this.state.pizzas.length === 0 && (\r\n              <div style={{ paddingTop: 30 }}>\r\n                <div>\r\n                  <CircularProgress style={{ width: \"10%\", height: \"10%\" }} />\r\n                </div>\r\n                <div style={{ paddingTop: 30 }}>\r\n                  <Typography variant=\"h5\">\r\n                    Trwa ładowanie. Do tej pory załadowano{\" \"}\r\n                    {this.state.pizzasLength} pozycji z{\" \"}\r\n                    {this.state.restaurantsLength} restauracji\r\n                  </Typography>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </List>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Typography\r\n            style={{\r\n              position: \"absolute\",\r\n              color: \"#666\",\r\n              top: 1,\r\n              right: 2,\r\n              fontSize: \"10px\"\r\n            }}\r\n          >\r\n            0.7v\r\n          </Typography>\r\n\r\n          <Fab\r\n            onClick={() =>\r\n              this.setState({ basketOpen: !this.state.basketOpen })\r\n            }\r\n            style={{ position: \"absolute\", bottom: 16, right: 16 }}\r\n            color=\"primary\"\r\n          >\r\n            <Badge\r\n              color=\"secondary\"\r\n              invisible={this.state.order.length === 0}\r\n              badgeContent={this.state.order.length}\r\n            >\r\n              <ShoppingBasketIcon />\r\n            </Badge>\r\n          </Fab>\r\n        </DialogActions>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default geolocated({\r\n  positionOptions: {\r\n    enableHighAccuracy: false\r\n  },\r\n  userDecisionTimeout: 5000,\r\n  suppressLocationOnMount: false\r\n})(Root);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}